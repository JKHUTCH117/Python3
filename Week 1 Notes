Week 1 Notes
ctl + 'd' to exit
vim [Filename].py

print (" ")
  Potiental Error: SyntaxError: Missing parentheses in call to 'print'.

SSH
ssh -Y student@IP

-Y = trusted GUI interface Enables trusted X11 forwarding.  Trusted X11 forwardings are not
             subjected to the X11 SECURITY extension controls.
-X = Enables X11 forwarding.  This can also be specified on a per-host
             basis in a configuration file.
            
terminator (linux box command)
 Right-Click and select split...
 
Modify vim
  vim  ~/.vimrc
    syntax enable
    set tabstop=4
    set shiftwidth=4
    set expandtab
    set number
    filetype indent on
    set autoindent



    " Custom stuff I like
    " set cursorline
    set showmode
    
 set nonu = turn off numbers
 set nu = turn on numbrt
 dd = delete
 o = insert under line
 O = insert above line
 
TypeSystem
No Characters in python/No arrays in python
"" or ''= String
camelcasing = lower first letter uper secod word
Command: type([varible])
Command: int([variable]) | displays integer of a sring, data type doesn't change
Command: [varible] = int([variable])
add stinges to concatate them, cannot maths two diffent variable
division // doesn't round.. just cuts off
LISTS
Command: myList = []
Command ex: myList = [1, "two", ['three', 'four']]
Command: myList [2]
Command: myList [-1] | last in list
potential error: IndexError: list index out of range | refrenced location doens't exist

Mutable data types: Lists and Dictionary, all other data types get a new space in memory
Command: id(variable)

Remove from list
del myList[Loc]

Methods
.append only works for lists
.pop be carful | takes away last item in list
Command: [varible] = myList.pop() | takes removed item and puts in it's own varible
.split('') to sepeate a string into a list by the delimeter(ususally a space) does not save anywhere
Command ex: myStr.split(',') | seperates by comma
typecasting to a list sets seperated  by letter
''.join to concate a string into one word
Command ex: ''.join(myWord)


TUPL s list you cannot modify
Command ex: myTup = ('stuck', 'here', 'forever')
This can only be typecasted to a list
Command ex: list(myTup)

String Minipulation??
Concatation
ex: name = 'King'
    'My Name is ' + name
.format insert variable in {} <- is placeholder
ex: 'My name is {}'.format(name)
in .format() using multiple placeholders, insert the varibles in the order they appear, comma specrated
ex: PI = 3.14159265359
    'Pi = {:.2f}' .format (PI)
    : = activate
    . = pull after decimal
    2f is the amount to pull after decimal

Can specify seperators
Command ex: print(a, b, sep=":")

Command ex: print a, b, sep=":", end="and thats the end")


input takes input and always returns a string
Command ex: input ("Type Something")
Command ex: int(input())


Modulus Remainder


Scripting Activity ex Answer:
email = 'monty@python.grail'

print('.'.join(email.slpit('@')).split('.'))

REPL
email = 'monty@python.grail'
email = email.split('@')
email = '.'.join(email)
email = email.split('.')


if
Instructor ex:
  user = unput()
  
  if user == 'yeet':
     print('yeet')
result = [x for x in range(0,50,5) if x%2 ==1]

elif
   elif user == 'teey':
      print("HappyFace")
   else:
      print("Sad face")
in:
if 'y' in user:
     print("y is in input")
     
is:
 
Python is case sensetive:
  use .lower() to remove any issues reguarding case
can use 'and'

Functions
def = define a function
pass = nothing, yeild nothing/won't error out
''' 
    Multi line comment
'''  

Instructor ex:
 def mul(a, b):
     '''
     Return a time b
     '''
     return a*b
     
 print(mul(6,10))
     
     
Local vs Global Variables, never make global variables


For Loops
it itteratates

Instructer ex:

myList = [1,2,3,4,5,6]

for i in myList
    print(i)
    
    
While loops
itterates until the condition is false

instructor ex:
while False:
  Print("Make it stop")
This itteration will never occur

wile True:
    print("Make it stop")
Whis itteration will run but infinate number of times


while True:
     print("Make it stop")
     break
This will run once or 'BREAK' out of the loop at break

c = 0
while c < 10::
    print("AA")
    c += 1
This will print AAA 10 times as it prints then itterates the c by 1 up to 10

RANGE

(start, stop, step) stop is up to but not including
Instructor ex:
range(1,10)
This sets the range values itterating by default 1
type(range(1,10))
This tells me what data type it is
list(range(1,10))
This lists the range in list format
range(1,10,2)
This itterates by 2 meaning it stops at 8
for i in range(10,-1,-1)
   print(i)
Counts backwards from 10 to 0

String Slicing (is not range)

Instructor ex:
myList = list(range(0,10))

myList[0:5]
This grabs the first 5 values, start stop step....
myList[0:5:2]
This is grabing every other item
myList[1:]
Grabs from 2nd item onward
myList[-3:]
Grabs last 3 items
myList[::-1]
This is string spliceing for just go backwards
myStr[:-1]
This grabs upto but not including the last item

List Comprehension

Instructor ex:
result = [x for x in range(0,50,5) if x%2 ==1]
The output: [5, 25, 35, 45]
I don't understand but... says not improtant




-------------------------------------------------------------------------------------------------------------------------------------------------------
Day 2

File I/O [BIG TICKET ITEM]
Commands:
fp = open('myFile.xtxt')
fp.close()
Make sure data type is a string
Options 2 Commands:
varFile = 'myFile.txt'
fp = open(varFile)
fp.close()
Pythonic Way
varFile = 'myFile.txt'
with open(varFile, 'r') as fp:
  pass
fp is the varible of the open file in this example
in a with statement, the file closes automaticly. no need for a close statement
Three ways to read a file... 2 are useful
    lines = fp.read()
    print(lines)
    reads as a string
    fp.read(5) 
    reads only a set number of characters, in this case 5
    
    fp.readlines()
    Outputs a list, each element is a line in the file.
 read=string
 readlines=lists
 readline=trash
 
 Writting
 varFile = 'myfile.txt'
 with open('outfile.txt', 'w') as fp:
    fp.write('My stuff\n')
    if the file doesn't exist, it will create unless you lack premissions
    insure you put a \n for a new line
    fp.writelines(['line2\n', 'line2\n', 'line3\n',])
    will not add new lines
    
    
with open('myfile.txt') as fp0:
      lines - fp0.readlines()
      
with open('outputfile.txt', 'w') as fp1:
    fp1.writelines(lines)
    
Nested
with open('nyfile.txt', 'r') as fp0
    with open('outfile.txt', 'w') as fp1:
      lines = fp0.read()
      fp1.write(lines)


Sets:
A set is un-organized container of objects

mySet = {1, 4, 6, 7}
type = set
can detiermine if items are in set
4 in set 
True
55 in set
false

mySet.add(50)
adds to set
mySet.remove(50)
removes item from set
Can not have multiple of the same item in the set

.intersection to see with is the same
.difference to see what is diffent from them
.union to merge sets

Dictionary
Uses a key,value pair
myDict = {'Pvt': 'E-1', 'PFC': 'E-2', "LCpl': 'E-3'}
To pull something from the dictionary, use the key...
in this case to pull E-1 I enter myDict['Pvt'] 
uses key and value, so they key can pull the value but the valuse cannot pull the key

to intterate through a dictorinary you get the keys not the values by default
for i in myDict:
  print(i)
Pvt
PFC
LCpl

to get the value
for i in myDict:
  print(myDict[i])
E-1
E-2
E-3

Counting stuf
myStr = 'The quick brown fox jumps over'
myDict = {}
for i in myStr
  if i in myDict:
          myDict[i] += 1
  else:
          myDict[i] = 1

Importing
import name

or

from name import item,item  


Varible length arugment
def fun(*args):
    print(args)
    print(sum(args))
    
fun(4, 6, 6, 7, 8, 3, 5)
This is a TUPL
If I see a star in the function definition, that means it's a variable length argument

LAMBDA
A simple mini function

ex:
def fun(x): 
		return x + 100
		
print(fun(50))

or

fun = lambda x: x + 100

print(fun(50))

def incrementor(n):
	retuen lambda x: x+n
fun = incrementor(42)
print(fun(3))












