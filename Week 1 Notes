Week 1 Notes
ctl + 'd' to exit
vim [Filename].py

print (" ")
  Potiental Error: SyntaxError: Missing parentheses in call to 'print'.

SSH
ssh -Y student@IP

-Y = trusted GUI interface Enables trusted X11 forwarding.  Trusted X11 forwardings are not
             subjected to the X11 SECURITY extension controls.
-X = Enables X11 forwarding.  This can also be specified on a per-host
             basis in a configuration file.
            
terminator (linux box command)
 Right-Click and select split...
 
Modify vim
  vim  ~/.vimrc
    syntax enable
    set tabstop=4
    set shiftwidth=4
    set expandtab
    set number
    filetype indent on
    set autoindent



    " Custom stuff I like
    " set cursorline
    set showmode
    
 set nonu = turn off numbers
 set nu = turn on numbrt
 dd = delete
 o = insert under line
 O = insert above line
 
TypeSystem
No Characters in python/No arrays in python
"" or ''= String
camelcasing = lower first letter uper secod word
Command: type([varible])
Command: int([variable]) | displays integer of a sring, data type doesn't change
Command: [varible] = int([variable])
add stinges to concatate them, cannot maths two diffent variable
division // doesn't round.. just cuts off
LISTS
Command: myList = []
Command ex: myList = [1, "two", ['three', 'four']]
Command: myList [2]
Command: myList [-1] | last in list
potential error: IndexError: list index out of range | refrenced location doens't exist

Mutable data types: Lists and Dictionary, all other data types get a new space in memory
Command: id(variable)

Remove from list
del myList[Loc]

Methods
.append only works for lists
.pop be carful | takes away last item in list
Command: [varible] = myList.pop() | takes removed item and puts in it's own varible
.split('') to sepeate a string into a list by the delimeter(ususally a space) does not save anywhere
Command ex: myStr.split(',') | seperates by comma
typecasting to a list sets seperated  by letter
''.join to concate a string into one word
Command ex: ''.join(myWord)


TUPL s list you cannot modify
Command ex: myTup = ('stuck', 'here', 'forever')
This can only be typecasted to a list
Command ex: list(myTup)

String Minipulation??
Concatation
ex: name = 'King'
    'My Name is ' + name
.format insert variable in {} <- is placeholder
ex: 'My name is {}'.format(name)
in .format() using multiple placeholders, insert the varibles in the order they appear, comma specrated
ex: PI = 3.14159265359
    'Pi = {:.2f}' .format (PI)
    : = activate
    . = pull after decimal
    2f is the amount to pull after decimal

Can specify seperators
Command ex: print(a, b, sep=":")

Command ex: print a, b, sep=":", end="and thats the end")


input takes input and always returns a string
Command ex: input ("Type Something")
Command ex: int(input())


Modulus Remainder


Scripting Activity ex Answer:
email = 'monty@python.grail'

print('.'.join(email.slpit('@')).split('.'))

REPL
email = 'monty@python.grail'
email = email.split('@')
email = '.'.join(email)
email = email.split('.')


if
Instructor ex:
  user = unput()
  
  if user == 'yeet':
     print('yeet')


elif
   elif user == 'teey':
      print("HappyFace")
   else:
      print("Sad face")
in:
if 'y' in user:
     print("y is in input")
     
is:
 
Python is case sensetive:
  use .lower() to remove any issues reguarding case
can use 'and'

Functions
def = define a function
pass = nothing, yeild nothing/won't error out
''' 
    Multi line comment
'''  

Instructor ex:
 def mul(a, b):
     '''
     Return a time b
     '''
     return a*b
     
 print(mul(6,10))
     
     
Local vs Global Variables, never make global variables


For Loops
it itteratates

Instructer ex:

myList = [1,2,3,4,5,6]

for i in myList
    print(i)
    
    
While loops
itterates until the condition is false

instructor ex:
while False:
  Print("Make it stop")
This itteration will never occur

wile True:
    print("Make it stop")
Whis itteration will run but infinate number of times


while True:
     print("Make it stop")
     break
This will run once or 'BREAK' out of the loop at break

c = 0
while c < 10::
    print("AA")
    c += 1
This will print AAA 10 times as it prints then itterates the c by 1 up to 10

RANGE

(start, stop, step) stop is up to but not including
Instructor ex:
range(1,10)
This sets the range values itterating by default 1
type(range(1,10))
This tells me what data type it is
list(range(1,10))
This lists the range in list format
range(1,10,2)
This itterates by 2 meaning it stops at 8
for i in range(10,-1,-1)
   print(i)
Counts backwards from 10 to 0

String Slicing (is not range)

Instructor ex:
myList = list(range(0,10))

myList[0:5]
This grabs the first 5 values, start stop step....
myList[0:5:2]
This is grabing every other item
myList[1:]
Grabs from 2nd item onward
myList[-3:]
Grabs last 3 items
myList[::-1]
This is string spliceing for just go backwards
myStr[:-1]
This grabs upto but not including the last item

List Comprehension

Instructor ex:
result = [x for x in range(0,50,5) if x%2 ==1]
The output: [5, 25, 35, 45]
I don't understand but... says not improtant




---------------------------------------------------------------------------------------------------------------------------------------------------------
Day 2






 
 
 
 
 
 
 
 
 
 
 
 
 
