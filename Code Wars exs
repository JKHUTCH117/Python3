Take 2 strings s1 and s2 including only letters from ato z. Return a new sorted string, the longest possible, containing distinct letters - each taken only once - coming from s1 or s2.

Examples:
a = "xyaabbbccccdefww"
b = "xxxxyyyyabklmopq"
longest(a, b) -> "abcdefklmopqwxy"

a = "abcdefghijklmnopqrstuvwxyz"
longest(a, a) -> "abcdefghijklmnopqrstuvwxyz"

----------- Mine
def longest(a1, a2):
    a1 = list(a1)
    a2 = list(a2)
    a3 = a1 + a2
    print(a3)
    a3 = sorted(a3)
    print(a3)
    a3 = ''.join(a3)
    print(a3)
    a3 = set(a3)
    print(a3)
    a3 = list(a3)
    print(a3)
    a3 = sorted(a3)
    a3 = ''.join(a3)
    print(a3)
    
    return a3
    
   
----- Solution    
def longest(a1, a2):
    return "".join(sorted(set(a1 + a2)))
    
    https://www.codewars.com/kata/52fba66badcd10859f00097e/train/python
    
    Trolls are attacking your comment section!

A common way to deal with this situation is to remove all of the vowels from the trolls' comments, neutralizing the threat.

Your task is to write a function that takes a string and return a new string with all vowels removed.

For example, the string "This website is for losers LOL!" would become "Ths wbst s fr lsrs LL!".

Note: for this kata y isn't considered a vowel.
    
    
    
    
    
    
    def disemvowel(string_):
    vowl = ['a', 'e', 'i', 'o', 'u']
    ls = list(string_)
    print(ls)
    
    for i in ls:
        #make if then
        ls.pop(i)
    
    return string_
    
    
    
    
    
    
    
    
    
    import codewars_test as test
from solution import disemvowel

@test.describe("Fixed Tests")
def basic_tests():
    @test.it("First fixed test")
    def fixed_test_1():
        test.assert_equals(disemvowel("This website is for losers LOL!"), "Ths wbst s fr lsrs LL!")
    
    
    
    
    
    
    
    
    
    
    
    
